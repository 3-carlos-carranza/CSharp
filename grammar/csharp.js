/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[5,7,8,9,10];
var parser = {trace: function trace() {
        Jison.print.apply(null, arguments);
    },
yy: {},
symbols_: {"error":2,"compilationUnit":3,"es":4,"EOF":5,"e":6,"IF":7,"OPEN_BRACE":8,"DOT":9,"IDENTIFIER":10,"literal":11,"BOOLEAN_LITERAL":12,"REAL_LITERAL":13,"INTEGER_LITERAL":14,"STRING_LITERAL":15,"CHARACTER_LITERAL":16,"NULL":17,"namespace-name":18,"namespace-or-type-name":19,"type-name":20,"type":21,"value-type":22,"reference-type":23,"struct-type":24,"enum-type":25,"simple-type":26,"numeric-type":27,"BOOL":28,"integral-type":29,"floating-point-type":30,"DECIMAL":31,"SBYTE":32,"BYTE":33,"SHORT":34,"USHORT":35,"INT":36,"UINT":37,"LONG":38,"ULONG":39,"CHAR":40,"FLOAT":41,"DOUBLE":42,"class-type":43,"interface-type":44,"array-type":45,"delegate-type":46,"OBJECT":47,"STRING":48,"non-array-type":49,"rank-specifiers":50,"rank-specifier":51,"OPEN_BRACKET":52,"dim-separators":53,"CLOSE_BRACKET":54,"COMMA":55,"variable-reference":56,"expression":57,"argument-list":58,"argument":59,"REF":60,"OUT":61,"primary-expression":62,"primary-no-array-creation-expression":63,"array-creation-expression":64,"simple-name":65,"parenthesized-expression":66,"member-access":67,"invocation-expression":68,"element-access":69,"this-access":70,"base-access":71,"post-increment-expression":72,"post-decrement-expression":73,"object-creation-expression":74,"delegate-creation-expression":75,"typeof-expression":76,"sizeof-expression":77,"checked-expression":78,"unchecked-expression":79,"OPEN_PARENS":80,"CLOSE_PARENS":81,"predefined-type":82,"expression-list":83,"THIS":84,"base":85,"OP_INC":86,"OP_DEC":87,"NEW":88,"array-initializer":89,"TYPEOF":90,"VOID":91,"CHECKED":92,"UNCHECKED":93,"unary-expression":94,"PLUS":95,"MINUS":96,"BANG":97,"TILDE":98,"STAR":99,"pre-increment-expression":100,"pre-decrement-expression":101,"cast-expression":102,"multiplicative-expression":103,"DIV":104,"PERCENT":105,"additive-expression":106,"shift-expression":107,"OP_LEFT_SHIFT":108,"RIGHT_SHIFT":109,"relational-expression":110,"LT":111,"GT":112,"OP_LE":113,"OP_GE":114,"IS":115,"AS":116,"equality-expression":117,"OP_EQ":118,"OP_NE":119,"and-expression":120,"AMP":121,"exclusive-or-expression":122,"CARET":123,"inclusive-or-expression":124,"BITWISE_OR":125,"conditional-and-expression":126,"OP_AND":127,"conditional-or-expression":128,"OP_OR":129,"conditional-expression":130,"INTERR":131,"COLON":132,"assignment":133,"assignment-operator":134,"ASSIGNMENT":135,"OP_ADD_ASSIGNMENT":136,"OP_SUB_ASSIGNMENT":137,"OP_MULT_ASSIGNMENT":138,"OP_DIV_ASSIGNMENT":139,"OP_MOD_ASSIGNMENT":140,"OP_AND_ASSIGNMENT":141,"OP_OR_ASSIGNMENT":142,"OP_XOR_ASSIGNMENT":143,"OP_LEFT_SHIFT_ASSIGNMENT":144,"RIGHT_SHIFT_ASSIGNMENT":145,"constant-expression":146,"boolean-expression":147,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IF",8:"OPEN_BRACE",9:"DOT",10:"IDENTIFIER",12:"BOOLEAN_LITERAL",13:"REAL_LITERAL",14:"INTEGER_LITERAL",15:"STRING_LITERAL",16:"CHARACTER_LITERAL",17:"NULL",28:"BOOL",31:"DECIMAL",32:"SBYTE",33:"BYTE",34:"SHORT",35:"USHORT",36:"INT",37:"UINT",38:"LONG",39:"ULONG",40:"CHAR",41:"FLOAT",42:"DOUBLE",47:"OBJECT",48:"STRING",52:"OPEN_BRACKET",54:"CLOSE_BRACKET",55:"COMMA",60:"REF",61:"OUT",77:"sizeof-expression",80:"OPEN_PARENS",81:"CLOSE_PARENS",84:"THIS",85:"base",86:"OP_INC",87:"OP_DEC",88:"NEW",89:"array-initializer",90:"TYPEOF",91:"VOID",92:"CHECKED",93:"UNCHECKED",95:"PLUS",96:"MINUS",97:"BANG",98:"TILDE",99:"STAR",104:"DIV",105:"PERCENT",108:"OP_LEFT_SHIFT",109:"RIGHT_SHIFT",111:"LT",112:"GT",113:"OP_LE",114:"OP_GE",115:"IS",116:"AS",118:"OP_EQ",119:"OP_NE",121:"AMP",123:"CARET",125:"BITWISE_OR",127:"OP_AND",129:"OP_OR",131:"INTERR",132:"COLON",135:"ASSIGNMENT",136:"OP_ADD_ASSIGNMENT",137:"OP_SUB_ASSIGNMENT",138:"OP_MULT_ASSIGNMENT",139:"OP_DIV_ASSIGNMENT",140:"OP_MOD_ASSIGNMENT",141:"OP_AND_ASSIGNMENT",142:"OP_OR_ASSIGNMENT",143:"OP_XOR_ASSIGNMENT",144:"OP_LEFT_SHIFT_ASSIGNMENT",145:"RIGHT_SHIFT_ASSIGNMENT"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,0],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[18,1],[20,1],[19,1],[19,3],[21,1],[21,1],[22,1],[22,1],[24,1],[24,1],[26,1],[26,1],[27,1],[27,1],[27,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[30,1],[30,1],[25,1],[23,1],[23,1],[23,1],[23,1],[43,1],[43,1],[43,1],[44,1],[45,2],[49,1],[50,1],[50,2],[51,3],[51,2],[53,1],[53,2],[46,1],[56,1],[58,1],[58,3],[59,1],[59,2],[59,2],[62,1],[62,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[65,1],[66,3],[67,3],[67,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[68,4],[68,3],[69,4],[83,1],[83,3],[70,1],[71,3],[71,4],[72,2],[73,2],[74,5],[74,4],[64,7],[64,6],[64,6],[64,5],[64,3],[75,5],[76,4],[76,4],[78,4],[79,4],[94,1],[94,2],[94,2],[94,2],[94,2],[94,2],[94,1],[94,1],[94,1],[100,2],[101,2],[102,4],[103,1],[103,3],[103,3],[103,3],[106,1],[106,3],[106,3],[107,1],[107,3],[107,3],[110,1],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[117,1],[117,3],[117,3],[120,1],[120,3],[122,1],[122,3],[124,1],[124,3],[126,1],[126,3],[128,1],[128,3],[130,1],[130,5],[133,3],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[134,1],[57,1],[57,1],[146,1],[147,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
            return {
                "node": "CompilationUnit1",
                "unicode": "1231"
            };
        
break;
case 4:
 
            console.log('IF');
        
break;
case 5:
 
            console.log('OPEN_BRACE');
        
break;
case 6:
 
            console.log('DOT');
        
break;
case 7:
 
            console.log('IDENTIFIER: '+$$[$0]);
        
break;
case 8:
 
            console.log('EMPTY');
        
break;
}
},
table: [{3:1,4:2,5:[2,8],6:3,7:$V0,8:$V1,9:$V2,10:$V3},{1:[3]},{5:[1,8],6:9,7:$V0,8:$V1,9:$V2,10:$V3},o($V4,[2,2]),o($V4,[2,4]),o($V4,[2,5]),o($V4,[2,6]),o($V4,[2,7]),{1:[2,1]},o($V4,[2,3])],
defaultActions: {8:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip */
break;
case 1:/* skip */
break;
case 2:/* skip */
break;
case 3:/* skip */
break;
case 4:/* skip */
break;
case 5:/* skip */
break;
case 6:/* skip */
break;
case 7:return 'ABSTRACT';
break;
case 8:return 116;
break;
case 9:return 'BASE';
break;
case 10:return 28;
break;
case 11:return 'BREAK';
break;
case 12:return 33;
break;
case 13:return 'CASE';
break;
case 14:return 'CATCH';
break;
case 15:return 40;
break;
case 16:return 92;
break;
case 17:return 'CLASS';
break;
case 18:return 'CONST';
break;
case 19:return 'CONTINUE';
break;
case 20:return 31;
break;
case 21:return 'DEFAULT';
break;
case 22:return 'DELEGATE';
break;
case 23:return 'DO';
break;
case 24:return 42;
break;
case 25:return 'ELSE';
break;
case 26:return 'ENUM';
break;
case 27:return 'EVENT';
break;
case 28:return 'EXPLICIT';
break;
case 29:return 'EXTERN';
break;
case 30:return 'FALSE';
break;
case 31:return 'FINALLY';
break;
case 32:return 'FIXED';
break;
case 33:return 41;
break;
case 34:return 'FOR';
break;
case 35:return 'FOREACH';
break;
case 36:return 'GOTO';
break;
case 37:return 7;
break;
case 38:return 'IMPLICIT';
break;
case 39:return 'IN';
break;
case 40:return 36;
break;
case 41:return 'INTERFACE';
break;
case 42:return 'INTERNAL';
break;
case 43:return 115;
break;
case 44:return 'LOCK';
break;
case 45:return 38;
break;
case 46:return 'NAMESPACE';
break;
case 47:return 88;
break;
case 48:return 17;
break;
case 49:return 47;
break;
case 50:return 'OPERATOR';
break;
case 51:return 61;
break;
case 52:return 'OVERRIDE';
break;
case 53:return 'PARAMS';
break;
case 54:return 'PRIVATE';
break;
case 55:return 'PROTECTED';
break;
case 56:return 'PUBLIC';
break;
case 57:return 'READONLY';
break;
case 58:return 60;
break;
case 59:return 'RETURN';
break;
case 60:return 32;
break;
case 61:return 'SEALED';
break;
case 62:return 34;
break;
case 63:return 'SIZEOF';
break;
case 64:return 'STACKALLOC';
break;
case 65:return 'STATIC';
break;
case 66:return 48;
break;
case 67:return 'STRUCT';
break;
case 68:return 'SWITCH';
break;
case 69:return 84;
break;
case 70:return 'THROW';
break;
case 71:return 'TRUE';
break;
case 72:return 'TRY';
break;
case 73:return 90;
break;
case 74:return 37;
break;
case 75:return 39;
break;
case 76:return 93;
break;
case 77:return 'UNSAFE';
break;
case 78:return 35;
break;
case 79:return 'USING';
break;
case 80:return 'VIRTUAL';
break;
case 81:return 91;
break;
case 82:return 'VOLATILE';
break;
case 83:return 'WHILE';
break;
case 84:return 'Unicode_escape_sequence';
break;
case 85:return 12;
break;
case 86:return 13;
break;
case 87:return 14; 
break;
case 88:return 15;
break;
case 89:return 16;
break;
case 90:return 8;
break;
case 91:return 'CLOSE_BRACE';
break;
case 92:return 52;
break;
case 93:return 54;
break;
case 94:return 80;
break;
case 95:return 81;
break;
case 96:return 55;
break;
case 97:return 132;
break;
case 98:return 'SEMICOLON';
break;
case 99:return 95;
break;
case 100:return 96;
break;
case 101:return 99;
break;
case 102:return 104;
break;
case 103:return 105;
break;
case 104:return 121;
break;
case 105:return 125;
break;
case 106:return 123;
break;
case 107:return 97;
break;
case 108:return 98;
break;
case 109:return 135;
break;
case 110:return 111;
break;
case 111:return 112;
break;
case 112:return 131;
break;
case 113:return 'DOUBLE_COLON';
break;
case 114:return 'OP_COALESCING';
break;
case 115:return 86;
break;
case 116:return 87;
break;
case 117:return 127;
break;
case 118:return 129;
break;
case 119:return 'OP_PTR';
break;
case 120:return 118;
break;
case 121:return 119;
break;
case 122:return 113;
break;
case 123:return 114;
break;
case 124:return 136;
break;
case 125:return 137;
break;
case 126:return 138;
break;
case 127:return 139;
break;
case 128:return 140;
break;
case 129:return 141;
break;
case 130:return 142;
break;
case 131:return 143;
break;
case 132:return 108;
break;
case 133:return 144;
break;
case 134:return 109;
break;
case 135:return 145;
break;
case 136:return 9
break;
case 137:return 10;
break;
case 138:return 5;
break;
case 139:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:(((([\u0020]|[\u00A0]|[\u1680]|[\u180E]|[\u2000]|[\u2001]|[\u2002]|[\u2003]|[\u2004]|[\u2005]|[\u2006]|[\u2008]|[\u2009]|[\u200A]|[\u202F]|[\u3000]|[\u205F])|[\u0009]|[\u000B]|[\u000C]|[\s])+)))/,/^(?:([\u000D]|[\u000A]|[\u0085]|[\u2028]|[\u2029]|\\n))/,/^(?:(\/\/(([^(\u000D|\u000A|\u0085|\u2028|\u2029|'\n')])+)?))/,/^(?:(\/\*((\/|((\*+)?([^('/'|'*')])))+)?(\*+)\/))/,/^(?:(\/\/\/(([^(\u000D|\u000A|\u0085|\u2028|\u2029|'\n')])+)?))/,/^(?:(\/\*\*((\/|((\*+)?([^('/'|'*')])))+)?(\*+)\/))/,/^(?:([\u000D]|[\u000A]|([\u000D][\u000A])|[\u0085]|[\u2029]))/,/^(?:abstract)/,/^(?:as)/,/^(?:base)/,/^(?:bool)/,/^(?:break)/,/^(?:byte)/,/^(?:case)/,/^(?:catch)/,/^(?:char)/,/^(?:checked)/,/^(?:class)/,/^(?:const)/,/^(?:continue)/,/^(?:decimal)/,/^(?:default)/,/^(?:delegate)/,/^(?:do)/,/^(?:double)/,/^(?:else)/,/^(?:enum)/,/^(?:event)/,/^(?:explicit)/,/^(?:extern)/,/^(?:false)/,/^(?:finally)/,/^(?:fixed)/,/^(?:float)/,/^(?:for)/,/^(?:foreach)/,/^(?:goto)/,/^(?:if)/,/^(?:implicit)/,/^(?:in)/,/^(?:int)/,/^(?:interface)/,/^(?:internal)/,/^(?:is)/,/^(?:lock)/,/^(?:long)/,/^(?:namespace)/,/^(?:new)/,/^(?:null)/,/^(?:object)/,/^(?:operator)/,/^(?:out)/,/^(?:override)/,/^(?:params)/,/^(?:private)/,/^(?:protected)/,/^(?:public)/,/^(?:readonly)/,/^(?:ref)/,/^(?:return)/,/^(?:sbyte)/,/^(?:sealed)/,/^(?:short)/,/^(?:sizeof)/,/^(?:stackalloc)/,/^(?:static)/,/^(?:string)/,/^(?:struct)/,/^(?:switch)/,/^(?:this)/,/^(?:throw)/,/^(?:true)/,/^(?:try)/,/^(?:typeof)/,/^(?:uint)/,/^(?:ulong)/,/^(?:unchecked)/,/^(?:unsafe)/,/^(?:ushort)/,/^(?:using)/,/^(?:virtual)/,/^(?:void)/,/^(?:volatile)/,/^(?:while)/,/^(?:(\\u([0-9a-fA-F]){4}|\\U([0-9a-fA-F]){8}))/,/^(?:(true|false))/,/^(?:((([0-9])+)(\.)(([0-9])+)(e(\+|-)?(([0-9])+)|E(\+|-)?(([0-9])+))?(F|f|D|d|M|m)?|(\.)(([0-9])+)(e(\+|-)?(([0-9])+)|E(\+|-)?(([0-9])+))?(F|f|D|d|M|m)?|(([0-9])+)(e(\+|-)?(([0-9])+)|E(\+|-)?(([0-9])+))(F|f|D|d|M|m)?|(([0-9])+)(F|f|D|d|M|m)))/,/^(?:(((0x(([0-9a-fA-F])+)(UL|Ul|uL|ul|LU|Lu|lU|lu|U|u|L|l)?)|(0X(([0-9a-fA-F])+)(UL|Ul|uL|ul|LU|Lu|lU|lu|U|u|L|l)?))|((([0-9])+)(UL|Ul|uL|ul|LU|Lu|lU|lu|U|u|L|l)?)))/,/^(?:(((")((([^('"'|'\\'|\u000D|\u000A|\u0085|\u2028|\u2029)])|(\\'|\\"|(\\\\)|\\0|\\a|\\b|\\f|\\n|\\r|\\t|\\v)|(\\x([0-9a-fA-F]){4}|\\x([0-9a-fA-F]){3}|\\x([0-9a-fA-F]){2}|\\x([0-9a-fA-F]))|(\\u([0-9a-fA-F]){4}|\\U([0-9a-fA-F]){8}))+)?("))|(@(")((([^('"')])|(""))+)?("))))/,/^(?:((')(([^('\''|'\\'|\u000D|\u000A|\u0085|\u2028|\u2029)])|(\\'|\\"|(\\\\)|\\0|\\a|\\b|\\f|\\n|\\r|\\t|\\v)|(\\x([0-9a-fA-F]){4}|\\x([0-9a-fA-F]){3}|\\x([0-9a-fA-F]){2}|\\x([0-9a-fA-F]))|(\\u([0-9a-fA-F]){4}|\\U([0-9a-fA-F]){8}))(')))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:!)/,/^(?:~)/,/^(?:=)/,/^(?:<)/,/^(?:>)/,/^(?:\?)/,/^(?:::)/,/^(?:\?\?)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:->)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:<<)/,/^(?:<<=)/,/^(?:>>)/,/^(?:>>=)/,/^(?:(\.))/,/^(?:(((((([\u0041-\u005A]|[\u00C0-\u00DE])|([\u0061-\u007A])|([\u01C5]|[\u01C8]|[\u01CB]|[\u01F2])|([\u02B0-\u02EE])|([\u01BB]|[\u01C0]|[\u01C1]|[\u01C2]|[\u01C3]|[\u0294])|([\u16EE]|[\u16EF]|[\u16F0]|[\u2160]|[\u2161]|[\u2162]|[\u2163]|[\u2164]|[\u2165]|[\u2166]|[\u2167]|[\u2168]|[\u2169]|[\u216A]|[\u216B]|[\u216C]|[\u216D]|[\u216E]|[\u216F]))|_)(((([\u0041-\u005A]|[\u00C0-\u00DE])|([\u0061-\u007A])|([\u01C5]|[\u01C8]|[\u01CB]|[\u01F2])|([\u02B0-\u02EE])|([\u01BB]|[\u01C0]|[\u01C1]|[\u01C2]|[\u01C3]|[\u0294])|([\u16EE]|[\u16EF]|[\u16F0]|[\u2160]|[\u2161]|[\u2162]|[\u2163]|[\u2164]|[\u2165]|[\u2166]|[\u2167]|[\u2168]|[\u2169]|[\u216A]|[\u216B]|[\u216C]|[\u216D]|[\u216E]|[\u216F]))|(([\u0030]|[\u0031]|[\u0032]|[\u0033]|[\u0034]|[\u0035]|[\u0036]|[\u0037]|[\u0038]|[\u0039]))|(([\u005F]|[\u203F]|[\u2040]|[\u2054]|[\uFE33]|[\uFE34]|[\uFE4D]|[\uFE4E]|[\uFE4F]|[\uFF3F]))|(([\u0300]|[\u0301]|[\u0302]|[\u0303]|[\u0304]|[\u0305]|[\u0306]|[\u0307]|[\u0308]|[\u0309]|[\u030A]|[\u030B]|[\u030C]|[\u030D]|[\u030E]|[\u030F]|[\u0310])|([\u0903]|[\u093E]|[\u093F]|[\u0940]|[\u0949]|[\u094A]|[\u094B]|[\u094C]))|(([\u00AD]|[\u0600]|[\u0601]|[\u0602]|[\u0603]|[\u06DD])))+)?))|@(((([\u0041-\u005A]|[\u00C0-\u00DE])|([\u0061-\u007A])|([\u01C5]|[\u01C8]|[\u01CB]|[\u01F2])|([\u02B0-\u02EE])|([\u01BB]|[\u01C0]|[\u01C1]|[\u01C2]|[\u01C3]|[\u0294])|([\u16EE]|[\u16EF]|[\u16F0]|[\u2160]|[\u2161]|[\u2162]|[\u2163]|[\u2164]|[\u2165]|[\u2166]|[\u2167]|[\u2168]|[\u2169]|[\u216A]|[\u216B]|[\u216C]|[\u216D]|[\u216E]|[\u216F]))|_)(((([\u0041-\u005A]|[\u00C0-\u00DE])|([\u0061-\u007A])|([\u01C5]|[\u01C8]|[\u01CB]|[\u01F2])|([\u02B0-\u02EE])|([\u01BB]|[\u01C0]|[\u01C1]|[\u01C2]|[\u01C3]|[\u0294])|([\u16EE]|[\u16EF]|[\u16F0]|[\u2160]|[\u2161]|[\u2162]|[\u2163]|[\u2164]|[\u2165]|[\u2166]|[\u2167]|[\u2168]|[\u2169]|[\u216A]|[\u216B]|[\u216C]|[\u216D]|[\u216E]|[\u216F]))|(([\u0030]|[\u0031]|[\u0032]|[\u0033]|[\u0034]|[\u0035]|[\u0036]|[\u0037]|[\u0038]|[\u0039]))|(([\u005F]|[\u203F]|[\u2040]|[\u2054]|[\uFE33]|[\uFE34]|[\uFE4D]|[\uFE4E]|[\uFE4F]|[\uFF3F]))|(([\u0300]|[\u0301]|[\u0302]|[\u0303]|[\u0304]|[\u0305]|[\u0306]|[\u0307]|[\u0308]|[\u0309]|[\u030A]|[\u030B]|[\u030C]|[\u030D]|[\u030E]|[\u030F]|[\u0310])|([\u0903]|[\u093E]|[\u093F]|[\u0940]|[\u0949]|[\u094A]|[\u094B]|[\u094C]))|(([\u00AD]|[\u0600]|[\u0601]|[\u0602]|[\u0603]|[\u06DD])))+)?)))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}